#include <Arduino.h>
#include <Wire.h>
#include <ArduinoJson.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <DallasTemperature.h>

#define RXPIN 16
#define TXPIN 17
#define TEMPODERESPOSTA 1000
#define SCREEN_WIDTH            128   // OLED display width, in pixels
#define SCREEN_HEIGHT           64    // OLED display height, in pixels
#define ONEWIREBUS              19    //Sensor de temperadura

DynamicJsonDocument doc(200);
SoftwareSerial pox(RXPIN, TXPIN);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);
OneWire onewire(ONEWIREBUS);
DallasTemperature sensor(&onewire);

void lerPox();
void displayAtualizacao();
void sensorAtualizacao();
void drawlogo(int i, int j);

enum { MENU = 0, PAGE_1, PAGE_2, PAGE_3};

ulong tsPox = 0, tsDisplay = 0, tsSensor = 0;
uint16_t BPM = 0, SpO2 = 0;
float_t temp = 0.00;

void setup() {
  Serial.begin(9600);
  pinMode(RXPIN, INPUT);
  pinMode(TXPIN, OUTPUT);
  pox.begin(9600);
  Wire.begin(); 
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c))
  {
    Serial.println("Erro ao iniciar o display");
    for(;;);
  }else
  {
    Serial.println("Display iniciado com sucesso");
  }
  drawlogo(4,1);
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.display();

  sensor.begin();
  sensor.requestTemperaturesByIndex(0);
  temp = sensor.getTempCByIndex(0);
}
  

void loop() {
  if(millis() - tsPox >= TEMPODERESPOSTA)
  {
    lerPox();
    if (BPM >= 40)
    {
      drawlogo(1,2);
    }
    
    tsPox = millis();
  }

  if(millis() - tsDisplay >= TEMPODERESPOSTA)
  {
    displayAtualizacao();
    tsDisplay = millis();
  }

    if(millis() - tsSensor >= TEMPODERESPOSTA*10)
  {
    void sensorAtualizacao();
    tsSensor = millis();
  }
}

void lerPox()
{
  if(pox.available())
  {
    DeserializationError erro = deserializeJson(doc, pox);
  
    if(erro == DeserializationError::Ok)
    {
      Serial.print("Sensor: ");
      Serial.print(doc["sensor"].as<String>());
      Serial.print("/  BPM: ");
      BPM = doc["bpm"].as<int16_t>();
      Serial.print(BPM);
      Serial.print("/  Spo2: ");
      SpO2 = doc["spo2"].as<int16_t>();
      Serial.println(SpO2);
    }
    else
    {
      Serial.print("deserializantionError retornou: ");
      Serial.println(erro.c_str());
      BPM = 0;
      SpO2 = 0;
      drawlogo(1,3);
      while (pox.available()>0)
      {
        pox.read();
      }      
    }
  }else
  {
    drawlogo(1,3);
    Serial.println("Pox is no avalaible");
    pox.begin(9600);
  }
}

void displayAtualizacao()
{
  // uint8_t enter = 0;
  uint8_t page = MENU;
  display.clearDisplay();
  switch (page)
  {
    case MENU:
      display.clearDisplay();
      display.setCursor(0,0);
      display.setTextSize(2);
      display.print(BPM);
      display.print("BPM");
      display.setCursor(0,18);
      display.print(SpO2);
      display.print("%");
      display.setCursor(0,36);
      display.printf("%.1f",temp);
      display.drawCircle(55,37,2,WHITE);
      display.setCursor(58,36);
      display.print("C");
      display.setTextSize(1);
      display.setCursor(0,54);
      display.print("PRESS ENTER FOR MENU");
      display.display();
      break;
    
    default:
      break;
    }
}

void sensorAtualizacao()
{
  sensor.requestTemperaturesByIndex(0);
  temp = sensor.getTempCByIndex(0);
  Serial.print(temp);
  Serial.println("Â°C");
}


void drawlogo(int i, int j)
{
  
  static const unsigned char logo_bmp_128x42_1 [] PROGMEM = {
  // 'logo_bmp_128x42', 74x64px
  0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xfe, 
  0x00, 0x03, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xc0, 0xff, 0x00, 
  0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x38, 
  0x1f, 0xc0, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x1e, 0x0f, 0xc0, 0xf8, 0x00, 0x00, 0x00, 
  0x3f, 0x00, 0x00, 0x0f, 0x87, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0xc3, 0xc0, 
  0xe0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0xe1, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 
  0x00, 0x01, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xc0, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf8, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x40, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x38, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc0, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x71, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xc0, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0xc0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x47, 0xc0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xc0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 
  0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
  0xe1, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xc0
  };
  static const unsigned char logo_bmp_128x42_2 [] PROGMEM = {
  // 'logo_bmp_128x42', 74x64px
  0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x01, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xc7, 
  0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xe1, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xc0, 0xff, 0xff, 0xf0, 0x78, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xf8, 0x3c, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xfc, 0x1e, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf3, 0xff, 
  0xff, 0xfe, 0x0f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x07, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x80, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x83, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xc0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc1, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xc1, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc0, 
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc3, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x80, 0x3f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xc7, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x8e, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x00, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xb8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  
  static const unsigned char logo_bmp_18x16_1 [] PROGMEM ={
    // 'logo_bmp_128x42', 18x16px
    0x1e, 0x1e, 0x00, 0x7f, 0x3e, 0x80, 0x7f, 0xfe, 0x00, 0xff, 0xff, 0x40, 0xff, 0xff, 0x40, 0xff, 
    0xff, 0x40, 0xff, 0xff, 0x40, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0x80, 0x3f, 0xff, 0x00, 0x1f, 0xfe, 
    0x00, 0x0f, 0xfc, 0x00, 0x07, 0xf8, 0x00, 0x03, 0xf0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0xc0, 0x00};
  
  static const unsigned char logo_bmp_18x16_2 [] PROGMEM={
    // 'coracao-partido Freepik', 18x16px
    0x00, 0x00, 0x00, 0x1c, 0x0e, 0x00, 0x3f, 0x3f, 0x00, 0x7f, 0x7f, 0x80, 0x7e, 0xff, 0x80, 0x7d, 
    0xff, 0x80, 0x7e, 0xff, 0x80, 0x3f, 0x7f, 0x00, 0x1f, 0xbe, 0x00, 0x0f, 0xdc, 0x00, 0x07, 0xb8, 
    0x00, 0x03, 0xb0, 0x00, 0x01, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  for(int a = 0; a<i; a++ )
  {
    if (j == 1){
      /*dispay.drawBitmap(pos x,pos y,*logo,LOGO_WIDTH,LOGO_HEIGHT,1);*/
      display.clearDisplay();
      display.drawBitmap(27, 0,  logo_bmp_128x42_1, 74, 64, WHITE);
      display.display();
      delay(250);
      display.clearDisplay();
      display.drawBitmap(27, 0,  logo_bmp_128x42_2, 74, 64, WHITE);
      display.display();
      delay(250);
    }else if( j==2)
    {
      display.drawBitmap(100, 0,  logo_bmp_18x16_1, 18, 16, WHITE);
      display.display();
    }else if(j==3)
    {
      display.drawBitmap(100, 0,  logo_bmp_18x16_2, 18, 16, WHITE);
      display.display();
    }
    
  }
}
